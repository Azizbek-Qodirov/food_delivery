definitions:
  models.ConfirmRegistrationReq:
    properties:
      code:
        type: string
      email:
        type: string
    type: object
  models.ForgotPasswordReq:
    properties:
      email:
        description: User's email address
        type: string
    type: object
  models.GetProfileResp:
    properties:
      email:
        description: User's email address
        type: string
      id:
        description: User's unique identifier
        type: string
      is_confirmed:
        description: Add IsConfirmed to the model
        type: boolean
      password:
        description: User's password
        type: string
      role:
        type: string
    type: object
  models.LoginReq:
    properties:
      email:
        description: User's email
        type: string
      password:
        description: User's password
        type: string
    type: object
  models.RecoverPasswordReq:
    properties:
      code:
        type: string
      email:
        type: string
      new_password:
        type: string
    type: object
  models.RegisterReqSwag:
    properties:
      email:
        description: User's email address
        type: string
      password:
        description: User's password
        type: string
    type: object
  token.Tokens:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
info:
  contact: {}
paths:
  /confirm-registration:
    post:
      consumes:
      - application/json
      description: Confirms a user's registration using the code sent to their email.
      parameters:
      - description: Confirmation request
        in: body
        name: confirmation
        required: true
        schema:
          $ref: '#/definitions/models.ConfirmRegistrationReq'
      produces:
      - application/json
      responses:
        "200":
          description: JWT tokens
          schema:
            $ref: '#/definitions/token.Tokens'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: Incorrect verification code
          schema:
            type: string
        "404":
          description: Verification code expired or email not found
          schema:
            type: string
      summary: Confirm registration with code
      tags:
      - registration
  /forgot-password:
    post:
      consumes:
      - application/json
      description: Sends a confirmation code to email recovery password
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.ForgotPasswordReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Page not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Forgot passwrod
      tags:
      - password-recovery
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: JWT tokens
          schema:
            $ref: '#/definitions/token.Tokens'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: Invalid email or password
          schema:
            type: string
      summary: Login a user
      tags:
      - login
  /profile:
    get:
      consumes:
      - application/json
      description: Get the profile of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetProfileResp'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - user
  /recover-password:
    post:
      consumes:
      - application/json
      description: Verifies the code and updates the password
      parameters:
      - description: Recover Password Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RecoverPasswordReq'
      produces:
      - application/json
      responses:
        "200":
          description: Password successfully updated
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: Incorrect verification code
          schema:
            type: string
        "404":
          description: Verification code expired or email not found
          schema:
            type: string
        "500":
          description: Error updating password
          schema:
            type: string
      summary: Recover password (Use this one after sending verification code)
      tags:
      - password-recovery
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with email, username, and password
      parameters:
      - description: User registration request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterReqSwag'
      produces:
      - application/json
      responses:
        "201":
          description: JWT tokens
          schema:
            $ref: '#/definitions/token.Tokens'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Register a new user
      tags:
      - registration
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
